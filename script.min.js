// Scroll Animation Handler
document.addEventListener('DOMContentLoaded', function() {
    // Professional Intersection Observer for scroll animations
    const observerOptions = {
        threshold: 0.15,
        rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Add a slight delay for more professional feel
                setTimeout(() => {
                    entry.target.classList.add('animate-in');
                }, 100);
                
                // For staggered animations, trigger children with professional timing
                if (entry.target.classList.contains('services-grid-new') || 
                    entry.target.classList.contains('process-steps') ||
                    entry.target.classList.contains('why-choose-grid')) {
                    
                    const children = entry.target.querySelectorAll('.scroll-animate-stagger');
                    children.forEach((child, index) => {
                        setTimeout(() => {
                            child.classList.add('animate-in');
                        }, 300 + (index * 200)); // More professional stagger timing
                    });
                }
            }
        });
    }, observerOptions);

    // Observe all elements with scroll animation classes
    const animatedElements = document.querySelectorAll('.scroll-animate, .scroll-animate-left, .scroll-animate-right, .scroll-animate-scale');
    animatedElements.forEach(el => observer.observe(el));

    // Special handling for grid containers
    const gridContainers = document.querySelectorAll('.services-grid-new, .process-steps, .why-choose-grid');
    gridContainers.forEach(container => observer.observe(container));

    // Professional section-level animations
    const sections = document.querySelectorAll('.services-showcase, .process, .why-choose-us');
    sections.forEach(section => observer.observe(section));

    // Professional smooth scroll for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                // Calculate offset for fixed header
                const headerHeight = document.querySelector('.header').offsetHeight;
                const targetPosition = target.offsetTop - headerHeight - 20; // Extra padding
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Mobile Navigation Toggle
    const navToggle = document.querySelector('.nav-toggle');
    const navMenu = document.querySelector('.nav-menu');
    
    if (navToggle && navMenu) {
        navToggle.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            this.classList.toggle('active');
        });

        // Close mobile menu when clicking on a link
        document.querySelectorAll('.nav-menu a').forEach(link => {
            link.addEventListener('click', () => {
                navMenu.classList.remove('active');
                navToggle.classList.remove('active');
            });
        });
    }

    // Enhanced header scroll effect with smooth transitions
    const header = document.querySelector('.header');
    let lastScrollTop = 0;
    let headerTicking = false;

    function updateHeader() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        if (scrollTop > 80) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
        
        lastScrollTop = scrollTop;
        headerTicking = false;
    }

    window.addEventListener('scroll', function() {
        if (!headerTicking) {
            requestAnimationFrame(updateHeader);
            headerTicking = true;
        }
    });

    // Quote Modal functionality
    const quoteModal = document.getElementById('quoteModal');
    const quoteForm = document.getElementById('quoteForm');
    
    // Open modal from CTA buttons
    document.querySelectorAll('a[href="quote.html"]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            if (quoteModal) {
                quoteModal.style.display = 'block';
                document.body.style.overflow = 'hidden';
            }
        });
    });

    // Close modal function
    window.closeQuoteModal = function() {
        if (quoteModal) {
            quoteModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    };

    // Close modal when clicking outside
    if (quoteModal) {
        quoteModal.addEventListener('click', function(e) {
            if (e.target === quoteModal) {
                closeQuoteModal();
            }
        });
    }

    // Form submission handling
    if (quoteForm) {
        quoteForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const formMessages = document.getElementById('form-messages');
            const submitBtn = document.getElementById('submit-btn');
            
            // Disable submit button
            submitBtn.disabled = true;
            submitBtn.textContent = 'Sending...';
            
            // Simulate form submission (replace with actual endpoint)
            setTimeout(() => {
                formMessages.innerHTML = '<div class="success-message">Thank you! We\'ll get back to you within 24 hours.</div>';
                quoteForm.reset();
                submitBtn.disabled = false;
                submitBtn.textContent = 'Get My Custom Quote â†’';
                
                // Close modal after 2 seconds
                setTimeout(() => {
                    closeQuoteModal();
                }, 2000);
            }, 1000);
        });
    }

    // Enhanced parallax effect with smoother performance
    let parallaxTicking = false;
    
    function updateParallax() {
        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.floating-shapes, .code-overlay');
        
        parallaxElements.forEach(element => {
            const speed = 0.3; // Slower, more subtle parallax
            element.style.transform = `translateY(${scrolled * speed}px)`;
        });
        
        parallaxTicking = false;
    }
    
    window.addEventListener('scroll', function() {
        if (!parallaxTicking) {
            requestAnimationFrame(updateParallax);
            parallaxTicking = true;
        }
    });

    // Enhanced scroll animations with better performance
    let ticking = false;
    
    function updateScrollAnimations() {
        // Add any additional scroll-based animations here
        ticking = false;
    }
    
    window.addEventListener('scroll', function() {
        if (!ticking) {
            requestAnimationFrame(updateScrollAnimations);
            ticking = true;
        }
    });
}); 